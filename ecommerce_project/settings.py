"""
Django settings for ecommerce_project project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from decimal import Decimal
import dj_database_url
from dotenv import load_dotenv # Para cargar variables de entorno en desarrollo

# Cargar variables de entorno al inicio. Es crucial que esto esté ANTES de que se usen.
load_dotenv() #

# Definición de BASE_DIR: Hay dos líneas, una es redundante.
# La versión de pathlib.Path es moderna y preferible.
BASE_DIR = Path(__file__).resolve().parent.parent #
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) # Esta línea es redundante y puede eliminarse

# --- CONFIGURACIÓN DE ARCHIVOS ESTÁTICOS Y DE MEDIOS (¡OPTIMIZADO PARA S3!) ---

# Configuración inicial para desarrollo (si no se usan S3 variables de entorno)
# Estas URL/STORAGE serán sobrescritas por la configuración de S3 si las variables de entorno están presentes.
STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # Directorio donde 'collectstatic' recolectará los archivos
MEDIA_URL = '/media/'
# Asegúrate de que MEDIA_ROOT sea una única definición correcta.
# Había dos MEDIA_ROOT, una apuntando a 'excel_files' y otra a 'media'. Elige una.
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Directorio local para archivos de medios

# --- VARIABLES DE ENTORNO Y SEGURIDAD ---

# SECRET_KEY: Solo una definición final. Asegúrate que la variable de entorno se use.
# La lógica para 'if not SECRET_KEY and not DEBUG' es buena.
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'QDLshDFQ74i2QDLRODQfQ2QDLshDFQ74i2QDLRODQfQ2QDLshDFQ74i2QDLRODQfQ2') # Asegúrate de que esta variable esté definida en tu entorno

# DEBUG: Cargar desde variable de entorno. La forma actual es correcta.
DEBUG = os.environ.get('DJANGO_DEBUG', 'False') == 'True'

# ALLOWED_HOSTS: Cargar desde variable de entorno. Correcto.
ALLOWED_HOSTS = 'yahirzaele1.pythonanywhere.com'
# --- APLICACIONES Y MIDDLEWARE ---

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Añade 'storages' aquí para que Django sepa manejar S3.
    'storages',
    'productos',
    'rest_framework',
    'channels',
    #'chat', # Descomenta si lo usas
    'accounts',
    'crispy_forms',
    'crispy_bootstrap4',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ecommerce_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecommerce_project.wsgi.application'
ASGI_APPLICATION = 'ecommerce_project.asgi.application'

# --- BASE DE DATOS ---

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3', # O si lo tienes en otra subcarpeta: BASE_DIR / 'data' / 'db.sqlite3'
    }
}

# --- VALIDACIÓN DE CONTRASEÑA, INTERNACIONALIZACIÓN, ETC. (Parecen correctos) ---
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'es-mx'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- CONFIGURACIÓN DE DJANGO CHANNELS ---

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.pubsub.RedisPubSubChannelLayer', # O 'channels_redis.core.RedisChannelLayer'
        'CONFIG': {
            # Aquí necesitarás el endpoint de tu servidor Redis en producción.
            # Puedes usar Amazon ElastiCache para Redis.
            # Lo cargarás desde una variable de entorno.
            "hosts": [os.environ.get('REDIS_URL', 'redis://127.0.0.1:6379')],
        },
    },
}

# Configuración para archivos estáticos (Django buscará aquí si no se usa S3)
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
# Usa el dominio personalizado si está configurado, de lo contrario el de S3 por defecto.
STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'


# Configuración para archivos de medios
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
# Usa el dominio personalizado si está configurado, de lo contrario el de S3 por defecto.
MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'


# --- CONFIGURACIÓN DE AUTENTICACIÓN Y OTROS (Parecen correctos) ---
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
LOGIN_URL = '/accounts/login/'
IVA_RATE = Decimal('0.16')
# Estas dos líneas son redundantes si ya las definiste arriba y se van a usar con S3.
# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Esta solo sería para desarrollo local.

# load_dotenv() # Esta línea debe ir al principio del archivo, como se sugirió.